# This document looks better when parsed on https://editor.swagger.io.
openapi: 3.0.2

info:
  description: >
    A portal that streamlines the planning process for Oregon State University
    CS Applied students and advisors


    [GitHub repository](https://github.com/osu-capstone-cs72/cs-applied-plan-portal)
  version: 2.0.0
  title: OSU CS Applied Plan Portal
  contact:
    name: API support
    email: 'thomasza@oregonstate.edu'
  license:
    name: MIT License
    url: 'https://github.com/osu-capstone-cs72/cs-applied-plan-portal/blob/master/LICENSE'

tags:
  - name: Comment
    description: API endpoints related to Comments
  - name: Course
    description: API endpoints related to Courses
  - name: Notification
    description: API endpoints related to Notifications
  - name: Plan
    description: API endpoints related to applied Plans
  - name: User
    description: API endpoints related to application Users

paths:
  /comment:
    post:
      summary: Create a new Comment
      description: >
        Creates a new Comment attached to an applied Plan.
      operationId: createComment
      tags:
        - Comment
      requestBody:
        $ref: '#/components/requestBodies/Comment_POST'
      responses:
        '201':
          $ref: '#/components/responses/Comment_POST_201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/course/updateDatabase':
    get:
      summary: Sync Courses with the OSU catalog
      description: >
        Fetches live Courses from the OSU course catalog. Existing Courses are
        updated, and new Courses are added to the application database.
      operationId: getLiveCourses
      tags:
        - Course
      responses:
        '200':
          $ref: '#/components/responses/Course_UpdateDatabase_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/course/search/{searchText}/{filterValue}':
    get:
      summary: Search Courses with text and filters
      description: >
        Returns information about a Course with the provided search text and
        filter value.
      operationId: getCourse
      tags:
        - Course
      parameters:
        - $ref: '#/components/parameters/Course_Search_GET_SearchText'
        - $ref: '#/components/parameters/Course_Search_GET_FilterValue'
      responses:
        '200':
          $ref: '#/components/responses/Course_Search_GET_200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /notification:
    get:
      summary: Fetch Notifications owned by a User
      description: Returns a set of Notifications owned by the logged in User.
      operationId: getNotifications
      tags:
        - Notification
      responses:
        '200':
          $ref: '#/components/responses/Notification_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/notification/{notificationId}':
    delete:
      summary: Delete a Notification owned by a User
      description: Deletes a Notification owned by the logged in User.
      operationId: deleteNotification
      tags:
        - Notification
      parameters:
        - $ref: '#/components/parameters/Notification_DELETE_NotificationId'
      responses:
        '200':
          $ref: '#/components/responses/Notification_DELETE_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /plan:
    post:
      summary: Create a new applied Plan
      description: >
        Creates a new applied Plan in the database when a student submits one.
      operationId: createPlan
      tags:
        - Plan
      requestBody:
        $ref: '#/components/requestBodies/Plan_POST'
      responses:
        '201':
          $ref: '#/components/responses/Plan_POST_201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Update a specific applied Plan
      description: Updates an existing applied Plan in the database.
      operationId: updatePlan
      tags:
        - Plan
      requestBody:
        $ref: '#/components/requestBodies/Plan_PATCH'
      responses:
        '200':
          $ref: '#/components/responses/Plan_PATCH_200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/plan/recent':
    get:
      summary: Fetch a list of recently viewed Plan
      description: >
        Returns a list of Plan recently viewed by the logged in User.
      operationId: getRecentPlans
      tags:
        - Plan
      responses:
        '200':
          $ref: '#/components/responses/Plan_Recent_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/plan/{planId}':
    get:
      summary: Fetch all data about a specific applied Plan
      description: >
        Returns all data for a specific applied Plan, including selected
        Courses, User info, and Reviews.
      operationId: getPlan
      tags:
        - Plan
      parameters:
        - $ref: '#/components/parameters/Plan_GET_PlanId'
      responses:
        '200':
          $ref: '#/components/responses/Plan_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    delete:
      summary: Delete an existing applied Plan
      description: Deletes an existing applied Plan with a matching identifier.
      operationId: deletePlan
      tags:
        - Plan
      parameters:
        - $ref: '#/components/parameters/Plan_DELETE_PlanId'
      responses:
        '200':
          $ref: '#/components/responses/Plan_DELETE_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'


  '/plan/{planId}/similar':
    get:
      summary: Fetch the number of applied Plans similar to the Plan
      description: >
        Returns a count of accepted similar Plans and a count of rejected
        similar Plans.
      operationId: getSimilarPlans
      tags:
        - Plan
      parameters:
        - $ref: '#/components/parameters/Plan_GET_PlanId'
      responses:
        '200':
          $ref: '#/components/responses/Plan_Similar_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/plan/search/{text}/{status}/{sort}/{order}/{cursorPrimary}/{cursorSecondary}':
    get:
      summary: Search for Plans, retrieving paginated results
      description: >
        Returns a list of Plans with matching criteria and cursor pagination.
      operationId: searchPlans
      tags:
        - Plan
      parameters:
        - $ref: '#/components/parameters/Search_Text'
        - $ref: '#/components/parameters/Plan_Search_GET_Status'
        - $ref: '#/components/parameters/Plan_Search_GET_Sort'
        - $ref: '#/components/parameters/Plan_Search_GET_Order'
        - $ref: '#/components/parameters/Search_CursorPrimary'
        - $ref: '#/components/parameters/Search_CursorSecondary'
      responses:
        '200':
          $ref: '#/components/responses/Plan_Search_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/plan/{planId}/activity/{cursorPrimary}/{cursorSecondary}':
    get:
      summary: >
        Fetch a Plan's activity, such as Comments and Reviews, retrieving
        paginated results
      description: >
        Returns an object containing a list of Plan's activity and the next
        cursor to the pagination
      operationId: getPlanActivity
      tags:
        - Plan
      parameters:
        - $ref: '#/components/parameters/Plan_GET_PlanId'
        - $ref: '#/components/parameters/Search_CursorPrimary'
        - $ref: '#/components/parameters/Search_CursorSecondary'
      responses:
        '200':
          $ref: '#/components/responses/Plan_Activity_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/user/search/{text}/{role}/{cursorPrimary}/{cursorSecondary}':
    get:
      summary: Fetch a User, retrieving paginated results
      description: >
        Returns a list of Users matching the criteria and cursor pagination
      operationId: searchUsers
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/Search_Text'
        - $ref: '#/components/parameters/User_Search_GET_Role'
        - $ref: '#/components/parameters/Search_CursorPrimary'
        - $ref: '#/components/parameters/Search_CursorSecondary'
      responses:
        '200':
          $ref: '#/components/responses/User_Search_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /user:
    post:
      summary: Create a new User
      description: >
        Creates a new User in the application.
      operationId: createUser
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/User_POST'
      responses:
        '201':
          $ref: '#/components/responses/User_POST_201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/user/authenticated':
    get:
      summary: Test the authentication of the current User
      description: Tests the authentication of the current User.
      operationId: authenticateUser
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/User_Authenticated_GET_200'
        '401':
          $ref: '#/components/responses/401'

  '/user/login':
    get:
      summary: Verify the User's ticket from ONID CAS
      description: >
        Verifies the User's credentials after redirecting from CAS by sending
        the ticket received from the redirection to the CAS service validator.
      operationId: casValidateUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/User_Login_GET_Ticket'
        - $ref: '#/components/parameters/User_Login_GET_Target'
      responses:
        '200':
          $ref: '#/components/responses/User_Login_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  '/user/{userId}/plans':
    get:
      summary: Fetch a list of applied Plans created by the User
      description: Returns a list of applied Plans created by the User.
      operationId: getUserPlans
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/User_UserId'
      responses:
        '200':
          $ref: '#/components/responses/User_Plans_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/user/{userId}':
    get:
      summary: Fetch information about a specific User
      description: Returns information about the User with matching identifier
      operationId: getUserById
      tags:
        - User
      parameters:
       - $ref: '#/components/parameters/User_UserId'
      responses:
        '200':
          $ref: '#/components/responses/User_GET_200'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    patch:
      summary: Update an existing User
      description: Updates an existing User in the database.
      operationId: updateUserPartial
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/User_UserId'
      responses:
        '200':
          $ref: '#/components/responses/User_Plans_PATCH_200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

components:
  schemas:
    Comment:
      description: An object representing information about a Comment
      type: object
      required:
        - commentId
        - planId
        - userId
        - time
        - text
      properties:
        commentId:
          allOf:
            - description: The unique identifier of the Comment
            - $ref: '#/components/schemas/Id'
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        userId:
          $ref: '#/components/schemas/User/properties/email'
        time:
          allOf:
            - description: The UTC time at which the Comment was created
            - $ref: '#/components/schemas/UtcTime'
        text:
          description: The text content of the Comment
          type: string
          minLength: 5
          maxLength: 500
          example: The quick brown fox jumps over the lazy dog.

    Course:
      description: An object representing information about a Course
      type: object
      required:
        - courseId
        - credits
        - courseName
        - courseCode
        - restriction
        - description
        - prerequisites
      properties:
        courseId:
          allOf:
            - description: The unique identifier of the Course
            - $ref: '#/components/schemas/Id'
        credits:
          description: The number of credits the Course offers
          type: string
          format: int32
          minLength: 1
          maxLength: 25
          example: '4'
        courseName:
          description: The name of the Course in the OSU catalog
          type: string
          minLength: 1
          maxLength: 100
          example: CLOUD APPLICATION DEVELOPMENT
        courseCode:
          description: The code of the Course in the OSU catalog
          type: string
          minLength: 1
          maxLength: 25
          example: CS 493
        restriction:
          description: >
            Encodes different restriction of the Course: `0` are any Courses a
            student is allowed to select, `1` are required Courses, and `2` are
            graduate Courses
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example: 1
        description:
          description: The description of the Course
          type: string
          minLength: 1
          maxLength: 1000
          example: Covers developing RESTful cloud services.
        prerequisites:
          description: The condition which students must meet to take the Course
          type: string
          minLength: 0
          maxLength: 1000
          example: A minimum grade of C is required in CS 290 and CS 261.

    Notification:
      description: An object representing information about a Notification
      type: object
      required:
        - notificationId
        - planId
        - userId
        - text
        - type
      properties:
        notificationId:
          allOf:
            - description: The unique identifier of the Notification
            - $ref: '#/components/schemas/Id'
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        userId:
          $ref: '#/components/schemas/User/properties/email'
        text:
          description: The text content of the Notification
          type: string
          minLength: 1
          maxLength: 100
          example: The quick brown fox jumps over the lazy dog.
        type:
          description: >
            Encodes different types of the Notification: `1` are Notifications
            about Comments on Plans, `2` are Notifications about Plan status,
            and `3` are Notifications about Course update progress
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          example: 1

    Plan:
      description: An object representing information about an applied Plan
      type: object
      required:
        - planId
        - status
        - planName
        - studentId
        - created
        - lastUpdated
        - planFocus
      properties:
        planId:
          allOf:
            - description: The unique identifier of the Plan
            - $ref: '#/components/schemas/Id'
        status:
          description: >
            Encodes different statuses of the Plan: `0` is Rejected, `1` is
            Awaiting Student Changes, `2` is Awaiting Review, `3` is
            Awaiting Final Review, and `4` is Accepted
          type: integer
          format: int32
          minimum: 0
          maximum: 4
          example: 3
        planName:
          description: The name of the Plan
          type: string
          minLength: 5
          maxLength: 50
          example: My AI plan
        studentId:
          $ref: '#/components/schemas/User/properties/email'
        created:
          allOf:
            - description: The UTC time at which the Plan was created
            - $ref: '#/components/schemas/UtcTime'
        lastUpdated:
          allOf:
            - description: The UTC time at which the Plan was last changed
            - $ref: '#/components/schemas/UtcTime'
        planFocus:
          description: The focus type of the Plan
          type: integer
          minimum: 0
          maximum: 9
          example: 2

    PlanReview:
      description: An object representing information about a Plan Review
      type: object
      required:
        - reviewId
        - planId
        - userId
        - status
        - time
      properties:
        reviewId:
          allOf:
            - description: The unique identifier of the Review
            - $ref: '#/components/schemas/Id'
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        userId:
          $ref: '#/components/schemas/User/properties/email'
        status:
          description: >
            Encodes different statuses of a Plan: `0` is Rejected, `1` is
            Awaiting Student Changes, `2` is Awaiting Review, `3` is
            Awaiting Final Review, and `4` is Accepted
          type: integer
          format: int32
          minimum: 0
          maximum: 4
          example: 3
        time:
          allOf:
            - description: The UTC time at which the Review was created
            - $ref: '#/components/schemas/UtcTime'

    RecentPlan:
      description: >
        An object representing information about a recently viewed applied Plan
      type: object
      required:
        - recentId
        - planId
        - userId
        - time
      properties:
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        userId:
          $ref: '#/components/schemas/User/properties/email'
        time:
          $ref: '#/components/schemas/Plan/properties/lastUpdated'

    SelectedCourse:
      description: >
        An object representing information about selected Courses in an applied
        Plan
      type: object
      required:
        - planId
        - courseId
        - credits
      properties:
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        courseId:
          $ref: '#/components/schemas/Course/properties/courseId'
        credits:
          $ref: '#/components/schemas/Course/properties/credits'

    User:
      description: An object representing information about an application User
      type: object
      required:
        - firstName
        - lastName
        - email
        - role
      properties:
        firstName:
          description: The first name of the User
          type: string
          minLength: 1
          maxLength: 50
          example: John
        lastName:
          description: The last name of the User
          type: string
          minLength: 1
          maxLength: 50
          example: Doe
        email:
          description: The OSU email of the User
          type: string
          format: email
          minLength: 1
          example: 'email@example.com'
        role:
          description: >
            Encodes the role of the User in the application: `0` is Student, `1`
            is Advisor, and `2` is Head Advisor
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example: 1

    PlanUser:
      description: >
        An object containing extended information about an applied Plan,
        including the Plan's information and the User's information
      type: object
      required:
        - planId
        - planName
        - firstName
        - lastName
        - status
        - created
        - lastUpdated
        - userId
      properties:
        planId:
          $ref: '#/components/schemas/RecentPlan/properties/planId'
        planName:
          $ref: '#/components/schemas/Plan/properties/planName'
        firstName:
          $ref: '#/components/schemas/User/properties/firstName'
        lastName:
          $ref: '#/components/schemas/User/properties/lastName'
        status:
          $ref: '#/components/schemas/Plan/properties/status'
        created:
          $ref: '#/components/schemas/Plan/properties/created'
        lastUpdated:
          $ref: '#/components/schemas/Plan/properties/lastUpdated'
        userId:
          $ref: '#/components/schemas/User/properties/email'

    PlanAdvisor:
      description: >
        An object containing extended information about an applied Plan,
        including the Plan's information and the list of advisors working on
        the Plan
      type: object
      required:
        - planId
        - status
        - planName
        - studentId
        - created
        - lastUpdated
        - advisors
      properties:
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        status:
          $ref: '#/components/schemas/Plan/properties/status'
        planName:
          $ref: '#/components/schemas/Plan/properties/planName'
        studentId:
          $ref: '#/components/schemas/Plan/properties/studentId'
        created:
          $ref: '#/components/schemas/Plan/properties/created'
        lastUpdated:
          $ref: '#/components/schemas/Plan/properties/lastUpdated'
        advisors:
          description: A list of names of advisors working on the Plan
          type: array
          minItems: 0
          items:
            type: string
            minLength: 1
            example: John Doe

    PlanSelectedCourse:
      description: >
        An object containing compact information about a selected Course in an
        applied Plan
      type: object
      required:
        - courseId
        - courseName
        - courseCode
        - prerequisites
        - credits
      properties:
        courseId:
          $ref: '#/components/schemas/Course/properties/courseId'
        courseName:
          $ref: '#/components/schemas/Course/properties/courseName'
        courseCode:
          $ref: '#/components/schemas/Course/properties/courseCode'
        prerequisites:
          $ref: '#/components/schemas/Course/properties/prerequisites'
        credits:
          $ref: '#/components/schemas/SelectedCourse/properties/credits'

    PlanActivity:
      description: >
        An object containing extended information about a Plan's activity, such
        as its Comments and Reviews
      type: object
      required:
        - id
        - planId
        - userId
        - text
        - status
        - time
        - timeUnix
        - firstName
        - lastName
      properties:
        id:
          description: >
            The unique identifier of the Plan activity. If the activity was a
            Comment, the value of this field is the value of the `commentId`
            field followed immediately by a single `c` character. Similarly, if
            the activity was a Review, the value of this field is the value of
            the `reviewId` field followed immediately by a single `r` character
          type: string
          minLength: 2
          example: 7272c
        planId:
          $ref: '#/components/schemas/Plan/properties/planId'
        userId:
          $ref: '#/components/schemas/Comment/properties/userId'
        text:
          $ref: '#/components/schemas/Comment/properties/text'
        status:
          $ref: '#/components/schemas/Plan/properties/status'
        time:
          $ref: '#/components/schemas/Comment/properties/time'
        timeUnix:
          description: Time in UNIX format
          type: integer
          format: int32
          minimum: 0
          maximum: 2147483647
        firstName:
          $ref: '#/components/schemas/User/properties/firstName'
        lastName:
          $ref: '#/components/schemas/User/properties/lastName'

    Id:
      type: integer
      format: int32
      minimum: 1
      maximum: 4294967295
      example: 72

    BigId:
      type: integer
      format: int64
      minimum: 10000000000
      maximum: 99999999999
      example: 72727272727

    InsertId:
      allOf:
        - description: The unique identifier of the newly inserted object
        - $ref: '#/components/schemas/Id'

    UtcTime:
      type: string
      format: 'yyyy-mm-dd HH:MM:SS'
      minLength: 19
      maxLength: 19
      example: '2020-12-31 23:59:59'

    NextCursor:
      description: The next cursor in the pagination
      type: string
      minLength: 1
      example: The quick brown fox jumps over the lazy dog.

    Error:
      description: An object describing an error response from the system
      type: object
      required:
        - error
      properties:
        error:
          description: A message describing the error
          type: string
          minLength: 1
          example: Something's wrong

  requestBodies:
    Comment_POST:
      required: true
      content:
        application/json:
          schema:
            description: An object representing information about a Comment
            type: object
            required:
              - planId
              - text
            properties:
              planId:
                $ref: '#/components/schemas/Comment/properties/planId'
              text:
                $ref: '#/components/schemas/Comment/properties/text'

    Plan_POST:
      required: true
      content:
        application/json:
          schema:
            description: >
              An object representing information about an applied Plan
            type: object
            required:
              - planName
              - courses
              - userId
              - planFocus
            properties:
              planName:
                $ref: '#/components/schemas/Plan/properties/planName'
              userId:
                description: ONID Id of the student
                type: string
                example: "smithj"
              planFocus:
                $ref: '#/components/schemas/Plan/properties/planFocus'
              courses:
                description: A list of selected Courses for the Plan
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    Plan_PATCH:
      required: true
      content:
        application/json:
          schema:
            description: >
              An object representing information about an applied Plan
            type: object
            required:
              - planId
            properties:
              planId:
                $ref: '#/components/schemas/Plan/properties/planId'
              planName:
                $ref: '#/components/schemas/Plan/properties/planName'
              courses:
                description: An updated list of selected Courses for the Plan
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    User_POST:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  parameters:
    Course_Search_GET_SearchText:
      name: searchText
      in: path
      description: Text typed into the search bar
      required: true
      schema:
        type: string
        minLength: 1
      example: Engineering

    Course_Search_GET_FilterValue:
      name: filterValue
      in: path
      description: Index of the selected filter option in the dropdown
      required: true
      schema:
        type: integer
        format: int32
        minimum: 0
      example: 2

    Notification_DELETE_NotificationId:
      name: notificationId
      in: path
      description: The unique identifier of the Notification to delete
      required: true
      schema:
        $ref: '#/components/schemas/Notification/properties/notificationId'

    Plan_GET_PlanId:
      name: planId
      in: path
      description: The unique identifier of the Plan to fetch
      required: true
      schema:
        $ref: '#/components/schemas/Plan/properties/planId'

    Plan_DELETE_PlanId:
      name: planId
      in: path
      description: The unique identifier of the Plan to delete
      required: true
      schema:
        $ref: '#/components/schemas/Plan/properties/planId'

    Search_Text:
      name: text
      in: path
      description: The text typed into the search bar
      required: true
      schema:
        type: string
        minLength: 1
      example: The quick brown fox jumps over the lazy dog.

    Plan_Search_GET_Status:
      name: status
      in: path
      description: The Plan status filter
      required: true
      schema:
        $ref: '#/components/schemas/Plan/properties/status'

    Plan_Search_GET_Sort:
      name: sort
      in: path
      description: The column number to sort by
      required: true
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 6
      example: 3

    Plan_Search_GET_Order:
      name: order
      in: path
      description: The sort order, either ascending (`1`) or descending (`0`)
      required: true
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 1
        example: 0

    Search_CursorPrimary:
      name: cursorPrimary
      in: path
      description: The primary cursor of the cursor pagination setup
      required: true
      schema:
        type: string
        minLength: 1
        example: The quick brown fox jumps over the lazy dog.

    Search_CursorSecondary:
      name: cursorSecondary
      in: path
      description: The secondary cursor of the cursor pagination setup
      required: true
      schema:
        type: string
        minLength: 1
        example: The quick brown fox jumps over the lazy dog.

    User_Search_GET_Role:
      name: role
      in: path
      description: The role to filter Users by
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/role'

    User_Login_GET_Ticket:
      name: ticket
      in: query
      description: The ticket received from the first ONID CAS redirection
      required: true
      schema:
        type: string
        minLength: 1
        example: The quick brown fox jumps over the lazy dog.

    User_Login_GET_Target:
      name: target
      in: query
      description: The target URL to finally redirect to on successful login
      required: true
      schema:
        type: string
        format: url
        minLength: 1
        example: 'https://example.com'

    User_UserId:
      name: userId
      in: path
      description: The ONID ID  of the User
      required: true
      schema:
        type: string
        minLength: 1
        example: 'smithj'

  responses:
    Comment_POST_201:
      description: Comment created
      content:
        application/json:
          schema:
            description: An object containing information about the new Comment
            type: object
            required:
              - insertId
              - time
            properties:
              insertId:
                $ref: '#/components/schemas/InsertId'
              time:
                allOf:
                  - description: The UTC time of the insertion
                  - $ref: '#/components/schemas/UtcTime'

    Course_UpdateDatabase_GET_200:
      description: Course update started
      content:
        application/json:
          schema:
            description: >
              An object containing information about the course update process
            type: object
            required:
              - message
            properties:
              message:
                description: The response message from the server
                type: string
                minLength: 1
                example: 'Courses update started.'

    Course_Search_GET_200:
      description: Courses found
      content:
        application/json:
          schema:
            description: >
              An object containing information about the matching Courses
            type: object
            properties:
              courses:
                description: >
                  A list of Courses that match the search text and the filter
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    Notification_GET_200:
      description: Notification set found
      content:
        application/json:
          schema:
            description: >
              An object containing information about the Notifications owned
              by the logged in User
            type: object
            properties:
              notifications:
                description: A list of Notifications
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

    Notification_DELETE_200:
      description: Notification deleted
      content:
        application/json:
          schema:
            description: >
              An object containing information about the deleted Notification
            type: object
            required:
              - affectedRows
            properties:
              affectedRows:
                description: The number of deleted Notifications
                type: integer
                format: int32
                minimum: 0
                maximum: 1
                example: 1

    Plan_POST_201:
      description: Submitted plan has been created
      content:
        application/json:
          schema:
            description: An object containing information about the new Plan
            type: object
            required:
              - insertId
            properties:
              insertId:
                $ref: '#/components/schemas/InsertId'

    Plan_PATCH_200:
      description: Plan has been updated
      content:
        application/json:
          schema:
            description: An object containing information about the updated Plan
            type: object
            required:
              - updatedName
              - updatedCourses
            properties:
              updatedName:
                $ref: '#/components/schemas/Plan/properties/planName'
              updatedCourses:
                description: The list of updated Courses
                type: array
                items:
                  $ref: '#/components/schemas/Course'

    Plan_Recent_GET_200:
      description: Plans found
      content:
        application/json:
          schema:
            description: >
              An object containing extended information about the Plans recently
              viewed by the logged in User
            type: object
            required:
              - plans
            properties:
              plans:
                description: The list of recent Plans with extended information
                type: array
                items:
                  $ref: '#/components/schemas/PlanUser'

    Plan_GET_200:
      description: Plan found
      content:
        application/json:
          schema:
            description: >
              An object containing extended information about an applied Plan,
              including the Plan's information, the User's information, and the
              list of selected Courses
            type: object
            required:
              - planId
              - status
              - planName
              - studentId
              - created
              - lastUpdated
              - firstName
              - lastName
              - email
              - courses
              - focusType
            properties:
              planId:
                $ref: '#/components/schemas/Plan/properties/planId'
              status:
                $ref: '#/components/schemas/Plan/properties/status'
              planName:
                $ref: '#/components/schemas/Plan/properties/planName'
              studentId:
                $ref: '#/components/schemas/Plan/properties/studentId'
              created:
                $ref: '#/components/schemas/Plan/properties/created'
              lastUpdated:
                $ref: '#/components/schemas/Plan/properties/lastUpdated'
              firstName:
                $ref: '#/components/schemas/User/properties/firstName'
              lastName:
                $ref: '#/components/schemas/User/properties/lastName'
              email:
                $ref: '#/components/schemas/User/properties/email'
              focusType:
                $ref: '#/components/schemas/Plan/properties/planFocus'
              courses:
                description: The list of selected Courses for the Plan
                type: array
                items:
                  $ref: '#/components/schemas/PlanSelectedCourse'

    Plan_Similar_GET_200:
      description: Similar plans found
      content:
        application/json:
          schema:
            description: >
              An object containing counts of accepted and rejected similar Plans
            type: object
            required:
              - accepted
              - rejected
            properties:
              accepted:
                allOf:
                  - description: The number of accepted similar Plans
                  - $ref: '#/components/schemas/Id'
              rejected:
                allOf:
                  - description: The number of rejected similar Plans
                  - $ref: '#/components/schemas/Id'

    Plan_Search_GET_200:
      description: Plans found
      content:
        application/json:
          schema:
            description: An object containing a cursor-paginated list of Plans
            type: object
            required:
              - plans
              - nextCursor
            properties:
              plans:
                description: The list of matching Plans
                type: array
                items:
                  $ref: '#/components/schemas/PlanUser'
              nextCursor:
                $ref: '#/components/schemas/NextCursor'

    Plan_DELETE_200:
      description: Plans deleted
      content:
        application/json:
          schema:
            description: An object containing information about the deleted Plan
            type: object
            required:
              - affectedRows
            properties:
              affectedRows:
                description: The number of deleted Plans
                type: integer
                format: int32
                minimum: 0
                maximum: 1
                example: 1

    Plan_Activity_GET_200:
      description: Plan activity found
      content:
        application/json:
          schema:
            description: >
              An object containing information about the Plan's activity
            type: object
            required:
              - activity
              - nextCursor
            properties:
              activity:
                description: The list of Plan's activity
                type: array
                items:
                  $ref: '#/components/schemas/PlanActivity'
              nextCursor:
                $ref: '#/components/schemas/NextCursor'

    User_Search_GET_200:
      description: Matching users found
      content:
        application/json:
          schema:
            description: An object containing information about matching Users
            type: object
            required:
              - users
              - nextCursor
            properties:
              users:
                description: The list of matching Users
                type: array
                items:
                  $ref: '#/components/schemas/User'
              nextCursor:
                $ref: '#/components/schemas/NextCursor'

    User_POST_201:
      description: User created
      content:
        application/json:
          schema:
            description: An object containing information about the new User
            type: object
            required:
              - insertId
            properties:
              insertId:
                $ref: '#/components/schemas/InsertId'

    User_Authenticated_GET_200:
      description: Test auth - authenticated
      content:
        application/json:
          schema:
            description: An object containing information about successful auth
            type: object
            required:
              - message
            properties:
              message:
                description: The response message from the server
                type: string
                minLength: 1
                example: 'authenticated'

    User_Login_GET_200:
      description: User authenticated

    User_Plans_GET_200:
      description: Plans found
      content:
        application/json:
          schema:
            description: An object containing information about the User's Plans
            type: object
            required:
              - plans
            properties:
              plans:
                description: The list of User's Plans
                type: array
                items:
                  $ref: '#/components/schemas/PlanAdvisor'

    User_GET_200:
      description: User found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    User_Plans_PATCH_200:
      description: User partial update succeeded
      content:
        application/json:
          schema:
            description: An object containing information about the update
            type: object
            required:
              - changedRows
            properties:
              changedRows:
                description: The number of updated User rows in the database
                type: integer
                format: int32
                minimum: 0
                maximum: 1
                example: 1

    '400':
      description: Missing or invalid request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '401':
      description: Missing or invalid authentication credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '403':
      description: Not allowed to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '404':
      description: Specified resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
